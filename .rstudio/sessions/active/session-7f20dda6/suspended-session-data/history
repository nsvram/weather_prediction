pwdw
pwd
pwd
mycsv <- read.csv("/home/rstudio/data/prediction_weather.psv",
sep = "|",
header = FALSE)
#install.packages("ggplot2")
# load package and data
options(scipen=999)  # turn-off scientific notation like 1e+48
library(ggplot2)
theme_set(theme_bw())  # pre-set the bw theme.
data("midwest", package = "ggplot2")
mycsv <- read.csv("/home/rstudio/data/prediction_weather.psv",
sep = "|",
header = FALSE)
colnames(mycsv) <- c('station_id','Lat', 'Lon','rainfall_mm','3pm_relative_humidity','3pm_msl_pressure_hpa', 'minimum_temperature', 'maximum_temperature','Conditions','predicted_date')
#View(mycsv)
ggplot(data = mycsv, aes(x = predicted_date)) +
geom_line(aes(y = mycsv$rainfall_mm, colour = "rainfall_mm")) +
geom_line(aes(y = mycsv$minimum_temperature, colour = "minimum_temperature")) +
geom_line(aes(y = mycsv$maximum_temperature, colour = "maximum_temperature")) +
scale_colour_manual("",
breaks = c("rainfall_mm", "minimum_temperature", "maximum_temperature"),
values = c("red", "green", "blue")) +
xlab(" ") +
scale_y_continuous("Temperatura (C)", limits = c(-10,40)) +
labs(title="TITULO")
#install.packages("ggplot2")
# load package and data
list.of.packages <- c("ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
ggplot(data = mycsv, aes(x = predicted_date)) +
geom_line(aes(y = mycsv$rainfall_mm, colour = "rainfall_mm")) +
geom_line(aes(y = mycsv$minimum_temperature, colour = "minimum_temperature")) +
geom_line(aes(y = mycsv$maximum_temperature, colour = "maximum_temperature")) +
scale_colour_manual("",
breaks = c("rainfall_mm", "minimum_temperature", "maximum_temperature"),
values = c("red", "green", "blue")) +
xlab(" ") +
scale_y_continuous("Temperatura (C)", limits = c(-10,40)) +
labs(title="TITULO")
#install.packages("ggplot2")
# load package and data
list.of.packages <- c("ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
options(scipen=999)  # turn-off scientific notation like 1e+48
library(ggplot2)
theme_set(theme_bw())  # pre-set the bw theme.
data("midwest", package = "ggplot2")
mycsv <- read.csv("/home/rstudio/data/prediction_weather.psv",
sep = "|",
header = FALSE)
colnames(mycsv) <- c('station_id','Lat', 'Lon','rainfall_mm','3pm_relative_humidity','3pm_msl_pressure_hpa', 'minimum_temperature', 'maximum_temperature','Conditions','predicted_date')
#View(mycsv)
ggplot(data = mycsv, aes(x = predicted_date)) +
geom_line(aes(y = mycsv$rainfall_mm, colour = "rainfall_mm")) +
geom_line(aes(y = mycsv$minimum_temperature, colour = "minimum_temperature")) +
geom_line(aes(y = mycsv$maximum_temperature, colour = "maximum_temperature")) +
scale_colour_manual("",
breaks = c("rainfall_mm", "minimum_temperature", "maximum_temperature"),
values = c("red", "green", "blue")) +
xlab(" ") +
scale_y_continuous("Temperatura (C)", limits = c(-10,40)) +
labs(title="TITULO")
View(mycsv)
#install.packages("ggplot2")
# load package and data
list.of.packages <- c("ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
options(scipen=999)  # turn-off scientific notation like 1e+48
library(ggplot2)
theme_set(theme_bw())  # pre-set the bw theme.
data("midwest", package = "ggplot2")
mycsv <- read.csv("/home/rstudio/data/prediction_weather.psv",
sep = "|",
header = FALSE)
colnames(mycsv) <- c('station_id','Lat', 'Lon','rainfall_mm','3pm_relative_humidity','3pm_msl_pressure_hpa', 'minimum_temperature', 'maximum_temperature','Conditions','predicted_date')
View(mycsv)
ggplot(data = mycsv, aes(x = predicted_date)) +
geom_line(aes(y = mycsv$rainfall_mm, colour = "rainfall_mm")) +
geom_line(aes(y = mycsv$minimum_temperature, colour = "minimum_temperature")) +
geom_line(aes(y = mycsv$maximum_temperature, colour = "maximum_temperature")) +
scale_colour_manual("",
breaks = c("rainfall_mm", "minimum_temperature", "maximum_temperature"),
values = c("red", "green", "blue")) +
xlab(" ") +
scale_y_continuous("Temperatura (C)", limits = c(-10,40)) +
labs(title="TITULO")
ggplot(data = mycsv, aes(x = predicted_date)) +
geom_line(aes(y = mycsv$rainfall_mm, colour = "rainfall_mm")) +
geom_line(aes(y = mycsv$minimum_temperature, colour = "minimum_temperature")) +
geom_line(aes(y = mycsv$maximum_temperature, colour = "maximum_temperature")) +
scale_colour_manual("",
breaks = c("rainfall_mm", "minimum_temperature", "maximum_temperature"),
values = c("red", "green", "blue")) +
xlab(" ") +
scale_y_continuous("Temperatura (C)", limits = c(-10,40)) +
labs(title="Weather prediction")
# labels and breaks for X axis text
lbls <- paste0(month.abb[month(mycsv$predicted_date)], " ", lubridate::year(mycsv$predicted_date))
library(lubridate)
list.of.packages <- c("ggplot2","lubridate")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
options(scipen=999)  # turn-off scientific notation like 1e+48
library(ggplot2)
library(lubridate)
# labels and breaks for X axis text
lbls <- paste0(month.abb[month(mycsv$predicted_date)], " ", lubridate::year(mycsv$predicted_date))
brks <- mycsv$predicted_date
# plot
ggplot(mycsv, aes(x=mycsv$predicted_date)) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank())  # turn off minor grid
# labels and breaks for X axis text
lbls <- paste0(month.abb[month(mycsv$predicted_date)], " ", lubridate::year(mycsv$predicted_date))
brks <- mycsv$predicted_date
# plot
ggplot(mycsv, aes(x=mycsv$predicted_date)) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank())  # turn off minor grid
ggplot(mycsv, aes(x=mycsv$predicted_date)) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Time Series Chart",
subtitle="Returns Percentage from 'Economics' Dataset",
caption="Source: Economics",
y="Returns %")
brks
lbls
# labels and breaks for X axis text
lbls <- paste0(month.abb[month(mycsv$predicted_date)], " ", lubridate::year(mycsv$predicted_date))
brks <- mycsv$predicted_date
# plot
ggplot(mycsv, aes(x=mycsv$predicted_date)) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank())  # turn off minor grid
ggplot(mycsv, aes(x=as.Date(mycsv$predicted_date,"%Y-%m-%d")) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank())  # turn off minor grid
mycsv$predicted_date
View(mycsv$predicted_date)
View(as.Date(mycsv$predicted_date,"%Y-%m-%d"))
# plot
ggplot(mycsv, aes(x=as.Date(mycsv$predicted_date,"%Y-%m-%d")) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank())  # turn off minor grid
# labels and breaks for X axis text
lbls <- paste0(month.abb[month(mycsv$predicted_date)], " ", lubridate::year(mycsv$predicted_date))
brks <- mycsv$predicted_date
# plot
ggplot(mycsv, aes(x=as.Date(mycsv$predicted_date,"%Y-%m-%d")) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank())  # turn off minor grid
ggplot(mycsv, aes(x=as.Date(mycsv$predicted_date,"%Y-%m-%d")) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank())  # turn off minor grid
)
# plot
ggplot(mycsv, aes(x=as.Date(mycsv$predicted_date,"%Y-%m-%d")) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank()))  # turn off minor grid
# plot
ggplot(mycsv, aes(x=as.Date(mycsv$predicted_date,"%Y-%m-%d")) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank()))  # turn off minor grid
# plot
ggplot(mycsv, aes(x=(as.Date(mycsv$predicted_date,"%Y-%m-%d"))) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank()))  # turn off minor grid
ggplot(mycsv, aes(x=mycsv$predicted_date) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank()))  # turn off minor grid
ggplot(mycsv, aes(x=mycsv$predicted_date) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank()))  # turn off minor grid
# plot
ggplot(mycsv, aes(x=mycsv$predicted_date) +
geom_line(aes(y=mycsv$rainfall_mm)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank()))  # turn off minor grid
